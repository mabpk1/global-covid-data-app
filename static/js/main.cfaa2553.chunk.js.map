{"version":3,"sources":["components/BarChart.tsx","components/GlobalInfo.tsx","components/SelectCountry.tsx","App.tsx","index.tsx"],"names":["ChartWrapper","styled","div","BarChart","countries","type","data","labels","forEach","country","push","value","TotalConfirmed","Country","datasets","label","backgroundColor","borderColor","borderWidth","generateChartData","Wrapper","Stats","h3","GlobalInfo","totalCases","totalDeaths","Intl","NumberFormat","format","SelectWrapper","SelectCountry","onItemClick","handleClearAll","options","isMulti","closeMenuOnSelect","placeholder","onChange","length","GlobalStyle","createGlobalStyle","Heading","h1","App","useState","undefined","setData","activeCountries","setActiveCountries","fetchData","a","axios","get","response","useEffect","Global","TotalDeaths","Countries","selectedCountries","ReactDOM","render","document","getElementById"],"mappings":"kPAIMA,EAAeC,IAAOC,IAAV,+cAsEHC,EA5C2B,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAqC3C,OACE,cAACJ,EAAD,UACE,cAAC,IAAD,CAAKK,KAAK,MAAMC,KAtCM,WACxB,IAAMA,EAAiB,GACjBC,EAAmB,GAOzB,OALAH,EAAUI,SAAQ,SAACC,GACjBH,EAAKI,KAAKD,EAAQE,MAAMC,gBACxBL,EAAOG,KAAKD,EAAQE,MAAME,YAGrB,CACLN,SACAO,SAAU,CACR,CACEC,MAAO,kBACPT,OACAU,gBAAiB,CACf,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEFC,YAAa,CACX,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEFC,YAAa,KAOKC,QC9DtBC,EAAUnB,IAAOC,IAAV,4OAaPmB,EAAQpB,IAAOqB,GAAV,0HAiBIC,EAT+B,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAC3D,OACE,eAACL,EAAD,WACE,eAACC,EAAD,sBAAe,IAAIK,KAAKC,cAAeC,OAAOJ,MAC9C,eAACH,EAAD,uBAAgB,IAAIK,KAAKC,cAAeC,OAAOH,U,QCtB/CI,EAAgB5B,IAAOC,IAAV,2VAiDJ4B,EA7BqC,SAAC,GAI9C,IAHL1B,EAGI,EAHJA,UACA2B,EAEI,EAFJA,YACAC,EACI,EADJA,eAEMC,EAAe,GAKrB,OAJA7B,EAAUI,SAAQ,SAACC,GACjBwB,EAAQvB,KAAK,CAAEC,MAAOF,EAASM,MAAON,EAAQI,aAI9C,cAACgB,EAAD,UACE,cAAC,IAAD,CACEI,QAASA,EACTC,SAAO,EACPC,mBAAmB,EACnBC,YAAY,oBACZC,SAAU,SAACjC,GACgB,IAArBA,EAAUkC,OACZN,IAEAD,EAAY3B,SC3ClBmC,EAAcC,YAAH,qQAaXC,EAAUxC,IAAOyC,GAAV,mOA8DEC,EAjDO,WAAO,IAAD,IAC1B,EAAwBC,wBACtBC,GADF,mBAAOvC,EAAP,KAAawC,EAAb,KAGA,EAA8CF,mBAAwB,IAAtE,mBAAOG,EAAP,KAAwBC,EAAxB,KAEMC,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,IAAMC,IAAI,sCADjB,cACVC,EADU,uBAE0BA,QAF1B,IAE0BA,OAF1B,EAE0BA,EAAU/C,KAFpC,OAEVA,EAFU,OAGhBwC,EAAQxC,GAHQ,2CAAH,qDAgBf,OAJAgD,qBAAU,WACRL,MACC,IAGD,qCACE,cAACV,EAAD,IACCjC,EACC,qCACE,cAACmC,EAAD,mCAEA,cAAC,EAAD,CACEjB,WAAU,OAAElB,QAAF,IAAEA,GAAF,UAAEA,EAAMiD,cAAR,aAAE,EAAc3C,eAC1Ba,YAAW,OAAEnB,QAAF,IAAEA,GAAF,UAAEA,EAAMiD,cAAR,aAAE,EAAcC,cAG7B,cAAC,EAAD,CAAUpD,UAAW2C,IAErB,cAAC,EAAD,CACE3C,UAAS,OAAEE,QAAF,IAAEA,OAAF,EAAEA,EAAMmD,UACjB1B,YA1Ba,SAAC2B,GACtBV,EAAmBU,IA0BX1B,eAvBkB,kBAAMgB,EAAmB,UA2B/C,iBC1ERW,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.cfaa2553.chunk.js","sourcesContent":["import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport styled from \"styled-components\";\n\nconst ChartWrapper = styled.div`\n  background-color: white;\n  width: 700px;\n  padding: 10px;\n  margin-bottom: 45px;\n  @media (max-width: 480px) {\n    width: 340px;\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n  @media (min-width: 480px) and (max-width: 768px) {\n    width: 400px;\n    padding: 10px;\n    margin-bottom: 20px;\n  }\n  @media (min-width: 600px) and (max-width: 768px) {\n    width: 530px;\n    padding: 10px;\n    margin-bottom: 20px;\n  }\n`;\n\ninterface BarChartProps {\n  countries: any[];\n}\n\nconst BarChart: React.FC<BarChartProps> = ({ countries }) => {\n  const generateChartData = () => {\n    const data: number[] = [];\n    const labels: string[] = [];\n\n    countries.forEach((country) => {\n      data.push(country.value.TotalConfirmed);\n      labels.push(country.value.Country);\n    });\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: \"Confirmed Cases\",\n          data,\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(54, 162, 235, 0.2)\",\n            \"rgba(255, 206, 86, 0.2)\",\n            \"rgba(75, 192, 192, 0.2)\",\n            \"rgba(153, 102, 255, 0.2)\",\n            \"rgba(255, 159, 64, 0.2)\",\n          ],\n          borderColor: [\n            \"rgba(255, 99, 132, 1)\",\n            \"rgba(54, 162, 235, 1)\",\n            \"rgba(255, 206, 86, 1)\",\n            \"rgba(75, 192, 192, 1)\",\n            \"rgba(153, 102, 255, 1)\",\n            \"rgba(255, 159, 64, 1)\",\n          ],\n          borderWidth: 1,\n        },\n      ],\n    };\n  };\n  return (\n    <ChartWrapper>\n      <Bar type=\"bar\" data={generateChartData()} />\n    </ChartWrapper>\n  );\n};\n\nexport default BarChart;\n","import styled from \"styled-components\";\n\ninterface GlobalInfoProps {\n  totalCases: number;\n  totalDeaths: number;\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  gap: 25px;\n  justify-content: center;\n  @media (max-width: 768px) {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 10px;\n    gap: 0;\n  }\n`;\n\nconst Stats = styled.h3`\n  font-size: 30px;\n  @media (max-width: 768px) {\n    font-size: 20px;\n    margin: 0;\n  }\n`;\n\nconst GlobalInfo: React.FC<GlobalInfoProps> = ({ totalCases, totalDeaths }) => {\n  return (\n    <Wrapper>\n      <Stats>Cases: {new Intl.NumberFormat().format(totalCases)}</Stats>\n      <Stats>Deaths: {new Intl.NumberFormat().format(totalDeaths)}</Stats>\n    </Wrapper>\n  );\n};\n\nexport default GlobalInfo;\n","import { CountryType } from \"../types\";\nimport Select from \"react-select\";\nimport styled from \"styled-components\";\n\ninterface SelectCountryProps {\n  countries: CountryType[];\n  onItemClick: (country: CountryType[]) => void;\n  handleClearAll: () => void;\n}\n\nconst SelectWrapper = styled.div`\n  width: 720px;\n  color: black;\n\n  @media (max-width: 480px) {\n    width: 350px;\n    font-size: 15px;\n  }\n\n  @media (min-width: 480px) and (max-width: 600px) {\n    width: 420px;\n    font-size: small;\n  }\n\n  @media (min-width: 600px) and (max-width: 768px) {\n    width: 550px;\n    font-size: small;\n  }\n`;\n\nconst SelectCountry: React.FC<SelectCountryProps> = ({\n  countries,\n  onItemClick,\n  handleClearAll,\n}) => {\n  const options: any = [];\n  countries.forEach((country) => {\n    options.push({ value: country, label: country.Country });\n  });\n\n  return (\n    <SelectWrapper>\n      <Select\n        options={options}\n        isMulti\n        closeMenuOnSelect={false}\n        placeholder=\"Select Country...\"\n        onChange={(countries: any) => {\n          if (countries.length === 0) {\n            handleClearAll();\n          } else {\n            onItemClick(countries);\n          }\n        }}\n      />\n    </SelectWrapper>\n  );\n};\n\nexport default SelectCountry;\n","import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport BarChart from \"./components/BarChart\";\nimport GlobalInfo from \"./components/GlobalInfo\";\nimport SelectCountry from \"./components/SelectCountry\";\nimport { CountryType, FetchDataResponseType } from \"./types\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: 'Courier New', Courier, monospace;\n    color: #f74a4a;\n    background-color: #dff;\n    display: flex;\n    justify-content: center;\n    @media (max-width: 768px) {\n      margin-top: 25px;\n    }\n  }\n`;\n\nconst Heading = styled.h1`\n  font-size: 35px;\n  text-decoration: underline;\n  text-align: center;\n  margin-top: 35px;\n  margin-bottom: 0;\n\n  @media (max-width: 768px) {\n    font-size: 25px;\n    margin-top: 25px;\n  }\n`;\n\nconst App: React.FC = () => {\n  const [data, setData] = useState<FetchDataResponseType | undefined>(\n    undefined\n  );\n  const [activeCountries, setActiveCountries] = useState<CountryType[]>([]);\n\n  const fetchData = async () => {\n    const response = await axios.get(\"https://api.covid19api.com/summary\");\n    const data: FetchDataResponseType = await response?.data;\n    setData(data);\n  };\n\n  const onClickCountry = (selectedCountries: CountryType[]) => {\n    setActiveCountries(selectedCountries);\n  };\n\n  const onClearAllCountries = () => setActiveCountries([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <GlobalStyle />\n      {data ? (\n        <>\n          <Heading>Global Covid-19 Data</Heading>\n\n          <GlobalInfo\n            totalCases={data?.Global?.TotalConfirmed}\n            totalDeaths={data?.Global?.TotalDeaths}\n          />\n\n          <BarChart countries={activeCountries} />\n\n          <SelectCountry\n            countries={data?.Countries}\n            onItemClick={onClickCountry}\n            handleClearAll={onClearAllCountries}\n          />\n        </>\n      ) : (\n        \"Loading...\"\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}